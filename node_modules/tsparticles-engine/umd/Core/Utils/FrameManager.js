(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Constants"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FrameManager = void 0;
    const Constants_1 = require("./Constants");
    function initDelta(value, fpsLimit = 60, smooth = false) {
        return {
            value,
            factor: smooth ? 60 / fpsLimit : (60 * value) / 1000,
        };
    }
    class FrameManager {
        constructor(container) {
            this.container = container;
        }
        async nextFrame(timestamp) {
            try {
                const container = this.container;
                if (!container.smooth &&
                    container.lastFrameTime !== undefined &&
                    timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {
                    container.draw(false);
                    return;
                }
                container.lastFrameTime ??= timestamp;
                const delta = initDelta(timestamp - container.lastFrameTime, container.fpsLimit, container.smooth);
                container.addLifeTime(delta.value);
                container.lastFrameTime = timestamp;
                if (delta.value > 1000) {
                    container.draw(false);
                    return;
                }
                await container.particles.draw(delta);
                if (!container.alive()) {
                    container.destroy();
                    return;
                }
                if (container.getAnimationStatus()) {
                    container.draw(false);
                }
            }
            catch (e) {
                console.error(`${Constants_1.errorPrefix} in animation loop`, e);
            }
        }
    }
    exports.FrameManager = FrameManager;
});
