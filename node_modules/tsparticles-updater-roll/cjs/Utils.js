"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateRoll = exports.initParticle = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
function initParticle(particle) {
    const rollOpt = particle.options.roll;
    if (!rollOpt?.enable) {
        particle.roll = {
            enable: false,
            horizontal: false,
            vertical: false,
            angle: 0,
            speed: 0,
        };
        return;
    }
    particle.roll = {
        enable: rollOpt.enable,
        horizontal: rollOpt.mode === "horizontal" || rollOpt.mode === "both",
        vertical: rollOpt.mode === "vertical" || rollOpt.mode === "both",
        angle: (0, tsparticles_engine_1.getRandom)() * Math.PI * 2,
        speed: (0, tsparticles_engine_1.getRangeValue)(rollOpt.speed) / 360,
    };
    if (rollOpt.backColor) {
        particle.backColor = (0, tsparticles_engine_1.rangeColorToHsl)(rollOpt.backColor);
    }
    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {
        const alterType = (0, tsparticles_engine_1.getRandom)() >= 0.5 ? "darken" : "enlighten";
        particle.roll.alter = {
            type: alterType,
            value: (0, tsparticles_engine_1.getRangeValue)(alterType === "darken" ? rollOpt.darken.value : rollOpt.enlighten.value),
        };
    }
    else if (rollOpt.darken.enable) {
        particle.roll.alter = {
            type: "darken",
            value: (0, tsparticles_engine_1.getRangeValue)(rollOpt.darken.value),
        };
    }
    else if (rollOpt.enlighten.enable) {
        particle.roll.alter = {
            type: "enlighten",
            value: (0, tsparticles_engine_1.getRangeValue)(rollOpt.enlighten.value),
        };
    }
}
exports.initParticle = initParticle;
function updateRoll(particle, delta) {
    const roll = particle.options.roll, data = particle.roll;
    if (!data || !roll?.enable) {
        return;
    }
    const speed = data.speed * delta.factor, max = 2 * Math.PI;
    data.angle += speed;
    if (data.angle > max) {
        data.angle -= max;
    }
}
exports.updateRoll = updateRoll;
