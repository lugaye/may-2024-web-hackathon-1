var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine", "./Options/Classes/Absorber", "./Absorbers", "./AbsorberContainer", "./Enums/AbsorberClickMode"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadAbsorbersPlugin = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    const Absorber_1 = require("./Options/Classes/Absorber");
    const Absorbers_1 = require("./Absorbers");
    class AbsorbersPlugin {
        constructor() {
            this.id = "absorbers";
        }
        getPlugin(container) {
            return new Absorbers_1.Absorbers(container);
        }
        loadOptions(options, source) {
            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
                return;
            }
            if (source?.absorbers) {
                options.absorbers = (0, tsparticles_engine_1.executeOnSingleOrMultiple)(source.absorbers, (absorber) => {
                    const tmp = new Absorber_1.Absorber();
                    tmp.load(absorber);
                    return tmp;
                });
            }
            options.interactivity.modes.absorbers = (0, tsparticles_engine_1.executeOnSingleOrMultiple)(source?.interactivity?.modes?.absorbers, (absorber) => {
                const tmp = new Absorber_1.Absorber();
                tmp.load(absorber);
                return tmp;
            });
        }
        needsPlugin(options) {
            if (!options) {
                return false;
            }
            const absorbers = options.absorbers;
            if (absorbers instanceof Array) {
                return !!absorbers.length;
            }
            else if (absorbers) {
                return true;
            }
            else if (options.interactivity?.events?.onClick?.mode &&
                (0, tsparticles_engine_1.isInArray)("absorber", options.interactivity.events.onClick.mode)) {
                return true;
            }
            return false;
        }
    }
    async function loadAbsorbersPlugin(engine) {
        const plugin = new AbsorbersPlugin();
        await engine.addPlugin(plugin);
    }
    exports.loadAbsorbersPlugin = loadAbsorbersPlugin;
    __exportStar(require("./AbsorberContainer"), exports);
    __exportStar(require("./Enums/AbsorberClickMode"), exports);
});
